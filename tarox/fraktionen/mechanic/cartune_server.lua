-- tarox/fraktionen/mechanic/cartune_server.lua
-- Version 7.2: Fahrzeug wird beim Markereintritt positioniert und leicht angehoben.
-- NEU V8: Mechaniker-Interaktion für Lvl 2/3 Motor/Nitro
-- NEU V8.1: Timer & Animation für Mechaniker-Installation
-- KORRIGIERT V8.1.1: setPedAnimation Argumente

local getPlayerFractionAndRankFunc = _G.getPlayerFractionAndRank or (exports.tarox and exports.tarox.getPlayerFractionAndRank)
local addToFactionTreasuryFunc = _G.addToFactionTreasury or (exports.tarox and exports.tarox.addToFactionTreasury)

local MECHANIC_FRACTION_ID_TUNE = 7
local TUNING_GARAGE_MARKER_POS = {x = -2049.35229, y = 178.67029, z = 28.83562}
local TUNING_GARAGE_MARKER_ELEMENT = nil
local playerInTuningMarker = {}
local isTuningMarkerCurrentlyVisible = true

local VEHICLE_TUNE_POSITION = {x = -2047.60974, y = 173.88263, z = 28.35471 + 0.1, rotZ = 90}

local TUNE_PRICES = {
    engine = { 15000, 35000, 70000 },
    nitro  = { 5000, 12000, 25000 },
    wheels = 8000,
    paint = 350
}
local NITRO_UPGRADE_IDS = { [1]=1010, [2]=1009, [3]=1008 }

local pendingHighLevelTuneRequests = {}
local TUNE_REQUEST_TIMEOUT = 5 * 60 * 1000
local MECHANIC_INSTALL_DURATION = 15000
local MECHANIC_INSTALL_ANIM_LIB = "SHOP"
local MECHANIC_INSTALL_ANIM_NAME = "SHOP_shelf_get"

-- [Hilfsfunktionen für Handling bleiben unverändert hier]
local function getNumericValue_cartune(val) if type(val) == "number" then return val end if type(val) == "string" then local num = tonumber(val) if num ~= nil then return num end end return nil end
local function isVectorTable_cartune(tbl) if type(tbl) ~= "table" then return false end if getNumericValue_cartune(tbl.x) ~= nil and getNumericValue_cartune(tbl.y) ~= nil and getNumericValue_cartune(tbl.z) ~= nil then return true end if getNumericValue_cartune(tbl[1]) ~= nil and getNumericValue_cartune(tbl[2]) ~= nil and getNumericValue_cartune(tbl[3]) ~= nil then return true end return false end
local function createCleanVector_cartune(originalVector, defaultX, defaultY, defaultZ) local defaultVec = { x = defaultX or 0, y = defaultY or 0, z = defaultZ or 0 } if type(originalVector) ~= "table" then return defaultVec end if isVectorTable_cartune(originalVector) then local x_val, y_val, z_val if getNumericValue_cartune(originalVector.x) ~= nil and getNumericValue_cartune(originalVector.y) ~= nil and getNumericValue_cartune(originalVector.z) ~= nil then x_val = getNumericValue_cartune(originalVector.x); y_val = getNumericValue_cartune(originalVector.y); z_val = getNumericValue_cartune(originalVector.z) elseif getNumericValue_cartune(originalVector[1]) ~= nil and getNumericValue_cartune(originalVector[2]) ~= nil and getNumericValue_cartune(originalVector[3]) ~= nil then x_val = getNumericValue_cartune(originalVector[1]); y_val = getNumericValue_cartune(originalVector[2]); z_val = getNumericValue_cartune(originalVector[3]) end if x_val ~= nil and y_val ~= nil and z_val ~= nil then return { x = x_val, y = y_val, z = z_val } end end return defaultVec end
local function isTransmissionTable_cartune(tbl) if type(tbl) ~= "table" then return false end local requiredKeys = {"maxVelocity", "engineAcceleration", "maxGear", "gears"} for _, key in ipairs(requiredKeys) do if tbl[key] == nil then return false end end if type(tbl.gears) ~= "table" then return false end return true end
local function createCleanTransmissionData_cartune(originalTransData, vehicleModelForDefaults) local defaultOriginalHandling = getOriginalHandling(vehicleModelForDefaults) local defaultNumGears = (originalTransData and getNumericValue_cartune(originalTransData.numberOfGears)) or (originalTransData and getNumericValue_cartune(originalTransData.maxGear)) or (defaultOriginalHandling and defaultOriginalHandling.numberOfGears) or 4 defaultNumGears = math.max(1, math.min(defaultNumGears, 7)) local defaultGears = {} local baseMaxVelForGearCalc = (originalTransData and getNumericValue_cartune(originalTransData.maxVelocity)) or (defaultOriginalHandling and defaultOriginalHandling.maxVelocity) or 200.0 for i = 1, defaultNumGears do local defaultGearRatio = (defaultOriginalHandling and defaultOriginalHandling.transmissionData and defaultOriginalHandling.transmissionData.gears and defaultOriginalHandling.transmissionData.gears[i] and defaultOriginalHandling.transmissionData.gears[i].ratio) or (3.5 - (i * 0.5)) local ratio = math.max(0.1, defaultGearRatio) local minSpeed = (i-1) * (baseMaxVelForGearCalc / defaultNumGears * 0.7) + (i > 1 and 5 or 0) local maxSpeed = i * (baseMaxVelForGearCalc / defaultNumGears * 0.9) + (i * 5) if i == defaultNumGears then maxSpeed = baseMaxVelForGearCalc end minSpeed = math.min(minSpeed, maxSpeed - 5) if minSpeed < 0 then minSpeed = 0 end table.insert(defaultGears, { ratio = ratio, minSpeed = minSpeed, maxSpeed = maxSpeed, unknown = 0 }) end local defaultFullTransmission = { maxVelocity = baseMaxVelForGearCalc, engineAcceleration = (originalTransData and getNumericValue_cartune(originalTransData.engineAcceleration)) or (defaultOriginalHandling and defaultOriginalHandling.engineAcceleration) or 10.0, maxGear = defaultNumGears, clutchTime = (defaultOriginalHandling and defaultOriginalHandling.transmissionData and defaultOriginalHandling.transmissionData.clutchTime) or 0.1, engineBraking = (defaultOriginalHandling and defaultOriginalHandling.transmissionData and defaultOriginalHandling.transmissionData.engineBraking) or 0.1, biasBetweenFrontAndRear = (defaultOriginalHandling and defaultOriginalHandling.transmissionData and defaultOriginalHandling.transmissionData.biasBetweenFrontAndRear) or 0.5, driveInertia = (defaultOriginalHandling and defaultOriginalHandling.transmissionData and defaultOriginalHandling.transmissionData.driveInertia) or 1.0, name = "standard", gears = defaultGears } if not originalTransData or type(originalTransData) ~= "table" or not isTransmissionTable_cartune(originalTransData) then return defaultFullTransmission end local cleanTrans = {} local numericFields = {"maxVelocity", "engineAcceleration", "engineInertia", "clutchTime", "engineBraking", "driveInertia", "biasBetweenFrontAndRear"} for _, field in ipairs(numericFields) do cleanTrans[field] = getNumericValue_cartune(originalTransData[field]) or defaultFullTransmission[field] end cleanTrans.maxGear = math.floor(getNumericValue_cartune(originalTransData.maxGear) or defaultNumGears) cleanTrans.maxGear = math.max(1, math.min(cleanTrans.maxGear, 7)) cleanTrans.name = tostring(originalTransData.name or "standard") cleanTrans.gears = {} if type(originalTransData.gears) == "table" and #originalTransData.gears == cleanTrans.maxGear then local allGearsValid = true for i = 1, cleanTrans.maxGear do if not originalTransData.gears[i] or type(originalTransData.gears[i]) ~= "table" then allGearsValid = false; break end end if allGearsValid then for i = 1, cleanTrans.maxGear do local gv_raw_entry = originalTransData.gears[i] cleanTrans.gears[i] = { ratio = getNumericValue_cartune(gv_raw_entry.ratio) or defaultFullTransmission.gears[i].ratio, minSpeed = getNumericValue_cartune(gv_raw_entry.minSpeed) or defaultFullTransmission.gears[i].minSpeed, maxSpeed = getNumericValue_cartune(gv_raw_entry.maxSpeed) or defaultFullTransmission.gears[i].maxSpeed, unknown = getNumericValue_cartune(gv_raw_entry.unknown) or 0 } end else cleanTrans.gears = defaultFullTransmission.gears end else cleanTrans.gears = defaultFullTransmission.gears; cleanTrans.maxGear = defaultNumGears end return cleanTrans end
local typeConverters_cartune = { engineType = function(val) if type(val) == "string" then local s = string.lower(val); if s == "petrol" then return 0 elseif s == "diesel" then return 1 elseif s == "electric" then return 2 end end local num_val = getNumericValue_cartune(val); if num_val ~= nil and (num_val >= 0 and num_val <= 2) then return num_val end return 0 end, driveType = function(val) if type(val) == "string" then local s = string.lower(val); if s == "fwd" then return 0 elseif s == "rwd" then return 1 elseif s == "awd" or s == "4wd" then return 2 end end local num_val = getNumericValue_cartune(val); if num_val ~= nil and (num_val >= 0 and num_val <= 2) then return num_val end return 1 end, headLight = function(val) if type(val) == "string" then local s = string.lower(val); if s == "small" then return 0 elseif s == "long" then return 1 elseif s == "big" then return 2 elseif s == "tall" then return 3 end end local num_val = getNumericValue_cartune(val); if num_val ~= nil and (num_val >= 0 and num_val <= 3) then return num_val end return 0 end, tailLight = function(val) if type(val) == "string" then local s = string.lower(val); if s == "small" then return 0 elseif s == "long" then return 1 elseif s == "big" then return 2 elseif s == "tall" then return 3 end end local num_val = getNumericValue_cartune(val); if num_val ~= nil and (num_val >= 0 and num_val <= 3) then return num_val end return 0 end, ABS = function(val) if type(val) == "boolean" then return val end if type(val) == "string" then local s = string.lower(val); if s == "true" then return true elseif s == "false" then return false end end local num_val = getNumericValue_cartune(val); if num_val ~= nil and (num_val == 0 or num_val == 1) then return num_val == 1 end return false end }
function getModifiedHandlingForCarTune(theVehicle, targetEngineLevel) if not isElement(theVehicle) or getElementType(theVehicle) ~= "vehicle" then return false end if not targetEngineLevel or type(targetEngineLevel) ~= "number" or targetEngineLevel < 0 or targetEngineLevel > 3 then return false end local vehicleModelID = getElementModel(theVehicle) local success, originalHandling_raw = pcall(getOriginalHandling, vehicleModelID) if not success or type(originalHandling_raw) ~= "table" then return false end local handling = {} handling.mass = getNumericValue_cartune(originalHandling_raw.mass) or 1700.0; handling.turnMass = getNumericValue_cartune(originalHandling_raw.turnMass) or 5000.0; handling.dragCoeff = getNumericValue_cartune(originalHandling_raw.dragCoeff) or 2.5; handling.vecCentreOfMass = createCleanVector_cartune(originalHandling_raw.centerOfMass or originalHandling_raw.vecCentreOfMass, 0, 0, -0.1); handling.percentSubmerged = getNumericValue_cartune(originalHandling_raw.percentSubmerged) or 85; handling.tractionMultiplier = getNumericValue_cartune(originalHandling_raw.tractionMultiplier) or 0.75; handling.tractionLoss = getNumericValue_cartune(originalHandling_raw.tractionLoss) or 0.85; handling.tractionBias = getNumericValue_cartune(originalHandling_raw.tractionBias or originalHandling_raw.driveBias) or 0.5; handling.engineInertia = getNumericValue_cartune(originalHandling_raw.engineInertia) or 5.0; handling.brakeDeceleration = getNumericValue_cartune(originalHandling_raw.brakeDeceleration) or 10.0; handling.brakeBias = getNumericValue_cartune(originalHandling_raw.brakeBias) or 0.5; handling.steeringLock = getNumericValue_cartune(originalHandling_raw.steeringLock) or 35.0; handling.suspensionForceLevel = getNumericValue_cartune(originalHandling_raw.suspensionForceLevel) or 1.0; handling.suspensionDampingLevel = getNumericValue_cartune(originalHandling_raw.suspensionDampingLevel or originalHandling_raw.suspensionDamping) or 0.1; handling.suspensionHighSpeedDamping = getNumericValue_cartune(originalHandling_raw.suspensionHighSpeedDamping) or 0.0; handling.suspensionUpperLimit = getNumericValue_cartune(originalHandling_raw.suspensionUpperLimit) or 0.35; handling.suspensionLowerLimit = getNumericValue_cartune(originalHandling_raw.suspensionLowerLimit) or -0.15; handling.suspensionBiasBetweenFrontAndRear = getNumericValue_cartune(originalHandling_raw.suspensionBiasBetweenFrontAndRear or originalHandling_raw.suspensionFrontRearBias) or 0.5; handling.suspensionAntiDiveMultiplier = getNumericValue_cartune(originalHandling_raw.suspensionAntiDiveMultiplier) or 0.3; handling.seatOffsetDistance = getNumericValue_cartune(originalHandling_raw.seatOffsetDistance) or 0.0; handling.collisionDamageMultiplier = getNumericValue_cartune(originalHandling_raw.collisionDamageMultiplier) or 1.0; handling.monetaryValue = getNumericValue_cartune(originalHandling_raw.monetaryValue or originalHandling_raw.monetary) or 10000; handling.handlingName = tostring(originalHandling_raw.handlingName or "hn_"..vehicleModelID); if string.match(handling.handlingName, "^%d+$") then handling.handlingName = "hn_" .. handling.handlingName end; handling.driveType = typeConverters_cartune.driveType(originalHandling_raw.driveType); handling.engineType = typeConverters_cartune.engineType(originalHandling_raw.engineType); handling.ABS = typeConverters_cartune.ABS(originalHandling_raw.ABS); handling.headLight = typeConverters_cartune.headLight(originalHandling_raw.headLight); handling.tailLight = typeConverters_cartune.tailLight(originalHandling_raw.tailLight); handling.animGroup = getNumericValue_cartune(originalHandling_raw.animGroup) or 0; local mf_raw = originalHandling_raw.modelFlags; handling.modelFlags = (type(mf_raw) == "string" and string.sub(mf_raw, 1, 2) == "0x" and tonumber(mf_raw, 16)) or getNumericValue_cartune(mf_raw) or 0; local hf_raw = originalHandling_raw.handlingFlags; handling.handlingFlags = (type(hf_raw) == "string" and string.sub(hf_raw, 1, 2) == "0x" and tonumber(hf_raw, 16)) or getNumericValue_cartune(hf_raw) or 0; handling.vecInertia = createCleanVector_cartune(originalHandling_raw.inertiaTensor or originalHandling_raw.vecInertia, 0.1,0.1,0.1); handling.transmissionData = createCleanTransmissionData_cartune(originalHandling_raw.transmissionData or originalHandling_raw, vehicleModelID); handling.numberOfGears = handling.transmissionData.maxGear; local baseMaxVelocity = (getOriginalHandling(vehicleModelID).transmissionData and getOriginalHandling(vehicleModelID).transmissionData.maxVelocity) or handling.transmissionData.maxVelocity; local baseEngineAcceleration = (getOriginalHandling(vehicleModelID).transmissionData and getOriginalHandling(vehicleModelID).transmissionData.engineAcceleration) or handling.transmissionData.engineAcceleration; local baseDriveForce = getNumericValue_cartune(getOriginalHandling(vehicleModelID).driveForce) if not baseDriveForce or baseDriveForce <= 0.001 then baseDriveForce = (vehicleModelID == 451 and 0.30) or (vehicleModelID == 411 and 0.35) or 0.20 end; local velocityMultiplier, accelerationMultiplier, driveForceMultiplier = 1.0, 1.0, 1.0; if targetEngineLevel == 1 then velocityMultiplier = 1.10; accelerationMultiplier = 1.10; driveForceMultiplier = 1.10 elseif targetEngineLevel == 2 then velocityMultiplier = 1.20; accelerationMultiplier = 1.20; driveForceMultiplier = 1.20 elseif targetEngineLevel == 3 then velocityMultiplier = 1.30; accelerationMultiplier = 1.30; driveForceMultiplier = 1.30 end if targetEngineLevel > 0 then handling.transmissionData.maxVelocity = baseMaxVelocity * velocityMultiplier; handling.transmissionData.engineAcceleration = baseEngineAcceleration * accelerationMultiplier; handling.driveForce = baseDriveForce * driveForceMultiplier else handling.transmissionData.maxVelocity = baseMaxVelocity; handling.transmissionData.engineAcceleration = baseEngineAcceleration; handling.driveForce = baseDriveForce end; handling.maxVelocity = handling.transmissionData.maxVelocity; handling.engineAcceleration = handling.transmissionData.engineAcceleration; handling.monetary = nil; handling.suspensionFrontRearBias = nil; handling.centerOfMass = nil; handling.inertiaTensor = nil; handling.suspensionDamping = nil; handling.driveBias = nil; return handling end
function applySpecificUpgradeOnServer(vehicle, tuneType, levelOrID) if not isElement(vehicle) then return end if tuneType == "engine" then local modifiedHandling = getModifiedHandlingForCarTune(vehicle, levelOrID) if modifiedHandling then setVehicleHandling(vehicle, modifiedHandling) end elseif tuneType == "nitro" then local nitroID = NITRO_UPGRADE_IDS[levelOrID] if nitroID then for _, id in pairs(NITRO_UPGRADE_IDS) do removeVehicleUpgrade(vehicle, id) end; addVehicleUpgrade(vehicle, nitroID) end elseif tuneType == "wheels" then local wheelID = tonumber(levelOrID) if wheelID then for i=1073, 1098 do removeVehicleUpgrade(vehicle, i) end; addVehicleUpgrade(vehicle, wheelID) end end end

function updateTuningMarkerVisibility()
    local playersUsingMarker = 0; for player, _ in pairs(playerInTuningMarker) do if isElement(player) then playersUsingMarker = playersUsingMarker + 1 end end
    if isElement(TUNING_GARAGE_MARKER_ELEMENT) then
        if playersUsingMarker > 0 and isTuningMarkerCurrentlyVisible then setElementVisibleTo(TUNING_GARAGE_MARKER_ELEMENT, root, false); isTuningMarkerCurrentlyVisible = false; outputDebugString("[CarTune-Server] Tuning-Marker unsichtbar.")
        elseif playersUsingMarker == 0 and not isTuningMarkerCurrentlyVisible then setElementVisibleTo(TUNING_GARAGE_MARKER_ELEMENT, root, true); isTuningMarkerCurrentlyVisible = true; outputDebugString("[CarTune-Server] Tuning-Marker sichtbar.") end
    end
end

addEvent("mechanic:clientClosedTuningMenu", true)
addEventHandler("mechanic:clientClosedTuningMenu", root, function(vehicleSentByClient)
    local player=client; if not isElement(player)then return end; local vehicleInServerContext=getElementData(player,"currentTuningVehicleRef")
    if not isElement(vehicleInServerContext)then if isElement(vehicleSentByClient)and getElementType(vehicleSentByClient)=="vehicle"then vehicleInServerContext=vehicleSentByClient else return end end
    local ownerOfVehicle=getElementData(vehicleInServerContext,"account_id"); local playerAccountId=getElementData(player,"account_id"); local playerFaction,_=getPlayerFractionAndRankFunc(player); local isMechanicOnDuty=getElementData(player,"mechanicImDienst"); local canUnfreeze=false
    if ownerOfVehicle and playerAccountId and ownerOfVehicle==playerAccountId then canUnfreeze=true elseif playerFaction==MECHANIC_FRACTION_ID_TUNE and isMechanicOnDuty then canUnfreeze=true end
    if canUnfreeze then if isElementFrozen(vehicleInServerContext)then setElementFrozen(vehicleInServerContext,false)end end
end)

addEventHandler("onResourceStart",resourceRoot,function()
    if isElement(TUNING_GARAGE_MARKER_ELEMENT)then destroyElement(TUNING_GARAGE_MARKER_ELEMENT)end;TUNING_GARAGE_MARKER_ELEMENT=createMarker(TUNING_GARAGE_MARKER_POS.x,TUNING_GARAGE_MARKER_POS.y,TUNING_GARAGE_MARKER_POS.z-1,"cylinder",3.5,0,150,255,100)
    if isElement(TUNING_GARAGE_MARKER_ELEMENT)then setElementInterior(TUNING_GARAGE_MARKER_ELEMENT,0);setElementDimension(TUNING_GARAGE_MARKER_ELEMENT,0);addEventHandler("onMarkerHit",TUNING_GARAGE_MARKER_ELEMENT,handleTuningGarageMarkerHit);addEventHandler("onMarkerLeave",TUNING_GARAGE_MARKER_ELEMENT,handleTuningGarageMarkerLeave);isTuningMarkerCurrentlyVisible=true;outputDebugString("[CarTune-Server V8.1.1] Marker erstellt.")else outputDebugString("[CarTune-Server V8.1.1] FEHLER: Marker NICHT erstellt!")end;updateTuningMarkerVisibility()
end)

addEventHandler("onResourceStop",resourceRoot,function()if isElement(TUNING_GARAGE_MARKER_ELEMENT)then destroyElement(TUNING_GARAGE_MARKER_ELEMENT)end;playerInTuningMarker={};pendingHighLevelTuneRequests={};outputDebugString("[CarTune-Server V8.1.1] Gestoppt.")end)
function handleTuningGarageMarkerHit(hitElement,matchingDimension)if getElementType(hitElement)~="vehicle"or not matchingDimension then return end;local player=getVehicleOccupant(hitElement,0);if not isElement(player)then return end;if isElement(TUNING_GARAGE_MARKER_ELEMENT)and getElementData(TUNING_GARAGE_MARKER_ELEMENT,"isInUseBy")and getElementData(TUNING_GARAGE_MARKER_ELEMENT,"isInUseBy")~=player then return end;playerInTuningMarker[player]=hitElement;if isElement(TUNING_GARAGE_MARKER_ELEMENT)then setElementData(TUNING_GARAGE_MARKER_ELEMENT,"isInUseBy",player,false)end;updateTuningMarkerVisibility();setElementPosition(hitElement,VEHICLE_TUNE_POSITION.x,VEHICLE_TUNE_POSITION.y,VEHICLE_TUNE_POSITION.z);setElementRotation(hitElement,0,0,VEHICLE_TUNE_POSITION.rotZ);setVehicleTurnVelocity(hitElement,0,0,0);setElementVelocity(hitElement,0,0,0);setTimer(setElementFrozen,250,1,hitElement,true);local fid,_=getPlayerFractionAndRankFunc(player);local isMechanicOnDuty=getElementData(player,"mechanicImDienst");local ownerAccId=getElementData(hitElement,"account_id");local playerAccId=getElementData(player,"account_id")
if(fid==MECHANIC_FRACTION_ID_TUNE and isMechanicOnDuty)or(ownerAccId and playerAccId and ownerAccId==playerAccId)then local vehicleDBID=getElementData(hitElement,"id");if not vehicleDBID then outputChatBox("❌ Fehler: Fahrzeug DB-ID fehlt.",player,255,0,0);setTimer(setElementFrozen,350,1,hitElement,false);playerInTuningMarker[player]=nil;if isElement(TUNING_GARAGE_MARKER_ELEMENT)then removeElementData(TUNING_GARAGE_MARKER_ELEMENT,"isInUseBy")end;updateTuningMarkerVisibility();return end;local tuneDataResult,_=exports.datenbank:queryDatabase("SELECT tune1,tune2,tune3 FROM vehicles WHERE id=?",vehicleDBID);local currentTuneData={tune1=0,tune2=0,tune3=0};if tuneDataResult and tuneDataResult[1]then currentTuneData.tune1=tonumber(tuneDataResult[1].tune1)or 0;currentTuneData.tune2=tonumber(tuneDataResult[1].tune2)or 0;currentTuneData.tune3=tonumber(tuneDataResult[1].tune3)or 0 end;setElementData(player,"currentTuningVehicleRef",hitElement,false);triggerClientEvent(player,"mechanic:openTuningMenuClient",player,hitElement,currentTuneData)else outputChatBox("Diese Werkstatt nur für Mechaniker im Dienst oder eigene Fahrzeuge.",player,255,100,0);setTimer(setElementFrozen,350,1,hitElement,false);playerInTuningMarker[player]=nil;if isElement(TUNING_GARAGE_MARKER_ELEMENT)then removeElementData(TUNING_GARAGE_MARKER_ELEMENT,"isInUseBy")end;updateTuningMarkerVisibility()end
end
function handleTuningGarageMarkerLeave(leftElement,matchingDimension)if not matchingDimension then return end;local playerAssociated=nil;local vehicleLeftMarker=nil;if getElementType(leftElement)=="player"then playerAssociated=leftElement;if playerInTuningMarker[playerAssociated]then vehicleLeftMarker=playerInTuningMarker[playerAssociated]end elseif getElementType(leftElement)=="vehicle"then vehicleLeftMarker=leftElement;for p,veh_in_marker in pairs(playerInTuningMarker)do if veh_in_marker==leftElement then playerAssociated=p;break end end end;if isElement(playerAssociated)and playerInTuningMarker[playerAssociated]then if(getElementType(leftElement)=="player"and leftElement==playerAssociated)or(getElementType(leftElement)=="vehicle"and leftElement==playerInTuningMarker[playerAssociated])then local vehicleToUnfreeze=vehicleLeftMarker or playerInTuningMarker[playerAssociated];if isElement(vehicleToUnfreeze)then setElementFrozen(vehicleToUnfreeze,false)end;triggerClientEvent(playerAssociated,"mechanic:forceCloseTuningMenu",playerAssociated);if pendingHighLevelTuneRequests[playerAssociated]then pendingHighLevelTuneRequests[playerAssociated]=nil;outputChatBox("Tuning-Anfrage abgebrochen (Zone verlassen).",playerAssociated,255,165,0)end;playerInTuningMarker[playerAssociated]=nil;if getElementData(playerAssociated,"currentTuningVehicleRef")then removeElementData(playerAssociated,"currentTuningVehicleRef")end;if isElement(TUNING_GARAGE_MARKER_ELEMENT)and getElementData(TUNING_GARAGE_MARKER_ELEMENT,"isInUseBy")==playerAssociated then removeElementData(TUNING_GARAGE_MARKER_ELEMENT,"isInUseBy")end;updateTuningMarkerVisibility()end end end
addEventHandler("onPlayerQuit",root,function()if playerInTuningMarker[source]then local vehicle=playerInTuningMarker[source];if isElement(vehicle)then setTimer(setElementFrozen,100,1,vehicle,false)end;playerInTuningMarker[source]=nil;updateTuningMarkerVisibility()end;if pendingHighLevelTuneRequests[source]then pendingHighLevelTuneRequests[source]=nil end end)

addEvent("cartune:purchaseUpgrade", true)
addEventHandler("cartune:purchaseUpgrade", root, function(vehicleFromClient, tuneType, levelOrID)
    local player = client
    if not isElement(player) or not isElement(vehicleFromClient) then return end
    local vehicleAssociatedWithPlayer = getElementData(player, "currentTuningVehicleRef")
    if not isElement(vehicleAssociatedWithPlayer) or vehicleAssociatedWithPlayer ~= vehicleFromClient then
        local px,py,pz=getElementPosition(player); local mx,my,mz=TUNING_GARAGE_MARKER_POS.x,TUNING_GARAGE_MARKER_POS.y,TUNING_GARAGE_MARKER_POS.z
        local dPM=getDistanceBetweenPoints3D(px,py,pz,mx,my,mz); local MAX_DIST_PLAYER_PURCHASE=8
        local vx,vy,vz=getElementPosition(vehicleFromClient); local dVT=getDistanceBetweenPoints3D(vx,vy,vz,VEHICLE_TUNE_POSITION.x,VEHICLE_TUNE_POSITION.y,VEHICLE_TUNE_POSITION.z); local MAX_DIST_VEHICLE_PURCHASE=6
        if dPM > MAX_DIST_PLAYER_PURCHASE or dVT > MAX_DIST_VEHICLE_PURCHASE then outputChatBox("❌ Fehler: Fahrzeug nicht in Tuning-Zone.", player, 255,0,0); return end
        if isElement(vehicleFromClient) then setElementData(player, "currentTuningVehicleRef", vehicleFromClient, false); vehicleAssociatedWithPlayer = vehicleFromClient end
    end
    if not isElement(vehicleAssociatedWithPlayer) then outputChatBox("❌ Fehler: Kein Fahrzeug zum Tunen.", player, 255,0,0); return end
    local price, dbColumn, newValue = 0, nil, nil; local vehicleDBID = getElementData(vehicleAssociatedWithPlayer, "id"); if not vehicleDBID then outputChatBox("❌ Fehler: Fahrzeug DB-ID fehlt.", player, 255,0,0); return end
    local tuneData, _ = exports.datenbank:queryDatabase("SELECT tune1, tune2, tune3 FROM vehicles WHERE id = ?", vehicleDBID); if not tuneData or not tuneData[1] then outputChatBox("❌ DB-Fehler Tuningdaten.", player, 255,0,0); return end
    local current = { tune1 = tonumber(tuneData[1].tune1) or 0, tune2 = tonumber(tuneData[1].tune2) or 0, tune3 = tonumber(tuneData[1].tune3) or 0 }

    if (tuneType == "engine" or tuneType == "nitro") and (tonumber(levelOrID) == 2 or tonumber(levelOrID) == 3) then
        outputChatBox("Hochwertige Upgrades (Level 2 & 3) müssen von einem Mechaniker installiert werden.", player, 255, 165, 0)
        triggerClientEvent(player, "mechanic:tuneRequestStatus", player, "Nutze /accepttune [AnfrageID] als Mechaniker.", false, tuneType, levelOrID)
        return
    end
    if tuneType == "engine" then levelOrID = tonumber(levelOrID); if levelOrID and levelOrID == 1 and current.tune1 == 0 then price,dbColumn,newValue = TUNE_PRICES.engine[levelOrID],"tune1",levelOrID else outputChatBox("❌ Ungültiges/Nicht erlaubtes Motor-Upgrade.", player, 255,100,0); return end
    elseif tuneType == "nitro" then levelOrID = tonumber(levelOrID); if levelOrID and levelOrID == 1 and current.tune2 == 0 then price,dbColumn,newValue = TUNE_PRICES.nitro[levelOrID],"tune2",levelOrID else outputChatBox("❌ Ungültiges/Nicht erlaubtes Nitro-Upgrade.", player, 255,100,0); return end
    elseif tuneType == "wheels" then levelOrID = tonumber(levelOrID); if levelOrID and levelOrID ~= current.tune3 and levelOrID >= 1073 and levelOrID <= 1098 then price,dbColumn,newValue = TUNE_PRICES.wheels,"tune3",levelOrID else outputChatBox("❌ Ungültige Felgen.", player,255,165,0); return end
    else outputChatBox("❌ Unbekannter Tuning-Typ.", player,255,100,0); return end
    if not dbColumn or not price or price <= 0 then outputChatBox("❌ Interner Preisfehler.", player,255,100,0); return end
    if getPlayerMoney(player) < price then outputChatBox("❌ Nicht genug Geld ($"..price..")!", player,255,0,0); return end
    if takePlayerMoney(player, price) then local success, dbErrMsg = exports.datenbank:executeDatabase("UPDATE vehicles SET "..dbColumn.." = ? WHERE id = ?", newValue, vehicleDBID); if not success then givePlayerMoney(player,price); outputChatBox("❌ DB Speicherfehler. Geld zurück.", player,255,0,0); return end
        applySpecificUpgradeOnServer(vehicleAssociatedWithPlayer, tuneType, newValue); outputChatBox("✅ Tuning für $"..price.." gekauft!", player,0,255,0); local fid,_=getPlayerFractionAndRankFunc(player); if fid==MECHANIC_FRACTION_ID_TUNE and getElementData(player,"mechanicImDienst")then if addToFactionTreasuryFunc then addToFactionTreasuryFunc(MECHANIC_FRACTION_ID_TUNE, price); outputChatBox("💰 $"..price.." zur Kasse.", player,0,220,120)end end
        local updatedTuneData = current; updatedTuneData[dbColumn] = newValue; triggerClientEvent(player, "cartune:updateLocalTuneData", player, updatedTuneData)
    end
end)

addEvent("cartune:purchaseColor", true)
addEventHandler("cartune:purchaseColor", root, function(targetVehicleFromClient,id1,id2,id3,id4,r1,g1,b1,r2,g2,b2,r3,g3,b3,r4,g4,b4)
    local player=client;if not isElement(player)or not isElement(targetVehicleFromClient)then return end;local vehicleAssociatedWithPlayer=getElementData(player,"currentTuningVehicleRef");if not isElement(vehicleAssociatedWithPlayer)or vehicleAssociatedWithPlayer~=targetVehicleFromClient then local px,py,pz=getElementPosition(player);local mx,my,mz=TUNING_GARAGE_MARKER_POS.x,TUNING_GARAGE_MARKER_POS.y,TUNING_GARAGE_MARKER_POS.z;local dPM=getDistanceBetweenPoints3D(px,py,pz,mx,my,mz);local MAX_DIST_PLAYER_PAINT=8;local vx,vy,vz=getElementPosition(targetVehicleFromClient);local dVT=getDistanceBetweenPoints3D(vx,vy,vz,VEHICLE_TUNE_POSITION.x,VEHICLE_TUNE_POSITION.y,VEHICLE_TUNE_POSITION.z);local MAX_DIST_VEHICLE_PAINT=6;if dPM>MAX_DIST_PLAYER_PAINT or dVT>MAX_DIST_VEHICLE_PAINT then outputChatBox("❌ Fahrzeug nicht in Tuning-Zone.",player,255,0,0);return end;if isElement(targetVehicleFromClient)then setElementData(player,"currentTuningVehicleRef",targetVehicleFromClient,false);vehicleAssociatedWithPlayer=targetVehicleFromClient end end
    if not isElement(vehicleAssociatedWithPlayer)then outputChatBox("❌ Kein Fahrzeug zum Lackieren.",player,255,0,0);return end;local price=TUNE_PRICES.paint;if getPlayerMoney(player)<price then outputChatBox("❌ Nicht genug Geld ($"..price..").",player,255,0,0);return end
    if takePlayerMoney(player,price)then setVehicleColor(vehicleAssociatedWithPlayer,r1,g1,b1,r2,g2,b2,r3,g3,b3,r4,g4,b4);local vehicleDBID=getElementData(vehicleAssociatedWithPlayer,"id")
        if vehicleDBID then local success,dbErrMsg=exports.datenbank:executeDatabase("UPDATE vehicles SET color1=?,color2=?,color3=?,color4=?,rgb_r1=?,rgb_g1=?,rgb_b1=?,rgb_r2=?,rgb_g2=?,rgb_b2=?,rgb_r3=?,rgb_g3=?,rgb_b3=?,rgb_r4=?,rgb_g4=?,rgb_b4=? WHERE id=?",id1,id2,id3,id4,r1,g1,b1,r2,g2,b2,r3,g3,b3,r4,g4,b4,vehicleDBID)
            if not success then outputChatBox("⚠️ Lackiert, Fehler beim Speichern. Geld zurück.",player,255,100,0);givePlayerMoney(player,price)else outputChatBox("✅ Für $"..price.." lackiert & gespeichert!",player,0,200,50);local fid,_=getPlayerFractionAndRankFunc(player);if fid==MECHANIC_FRACTION_ID_TUNE and getElementData(player,"mechanicImDienst")then if addToFactionTreasuryFunc then addToFactionTreasuryFunc(MECHANIC_FRACTION_ID_TUNE,price);outputChatBox("💰 $"..price.." zur Kasse.",player,0,220,120)end end end
        else outputChatBox("⚠️ Lackiert, nicht gespeichert (keine DB-ID). Geld zurück.",player,255,100,0);givePlayerMoney(player,price)end
    end
end)

addEvent("mechanic:requestHighLevelTune", true)
addEventHandler("mechanic:requestHighLevelTune", root, function(vehicleElement,tuneType,levelOrID,itemName,itemPrice)
    local player=client;if not isElement(player)or not isElement(vehicleElement)then return end;if pendingHighLevelTuneRequests[player]then triggerClientEvent(player,"mechanic:tuneRequestStatus",player,"Du hast bereits eine offene Tuning-Anfrage.",false);return end
    local currentTuneDataResult,_=exports.datenbank:queryDatabase("SELECT tune1,tune2 FROM vehicles WHERE id=?",getElementData(vehicleElement,"id"));local currentTune1=0;local currentTune2=0;if currentTuneDataResult and currentTuneDataResult[1]then currentTune1=tonumber(currentTuneDataResult[1].tune1)or 0;currentTune2=tonumber(currentTuneDataResult[1].tune2)or 0 end
    if tuneType=="engine"and(levelOrID~=currentTune1+1 or levelOrID<2 or levelOrID>3)then triggerClientEvent(player,"mechanic:tuneRequestStatus",player,"Ungültiges Motor-Upgrade.",false);return elseif tuneType=="nitro"and(levelOrID~=currentTune2+1 or levelOrID<2 or levelOrID>3)then triggerClientEvent(player,"mechanic:tuneRequestStatus",player,"Ungültiges Nitro-Upgrade.",false);return end
    if getPlayerMoney(player)<itemPrice then triggerClientEvent(player,"mechanic:tuneRequestStatus",player,"Nicht genug Geld ($"..itemPrice..").",false);return end
    local mechanicsOnline={};for _,mechPlayer in ipairs(getElementsByType("player"))do local fid,rank=getPlayerFractionAndRankFunc(mechPlayer);if fid==MECHANIC_FRACTION_ID_TUNE and getElementData(mechPlayer,"mechanicImDienst")==true then table.insert(mechanicsOnline,mechPlayer)end end
    if #mechanicsOnline==0 then triggerClientEvent(player,"mechanic:tuneRequestStatus",player,"Keine Mechaniker im Dienst.",false);return end
    local requestID=math.random(10000,99999);pendingHighLevelTuneRequests[player]={id=requestID,vehicle=vehicleElement,tuneType=tuneType,levelOrID=levelOrID,itemName=itemName,itemPrice=itemPrice,requestTick=getTickCount()}
    local posX,posY,posZ=getElementPosition(player);local rX,rY,rZ=math.floor(posX),math.floor(posY),math.floor(posZ)
    local notifyMsg=string.format("Tuning-Anfrage #%d von %s (ID %d) für %s (Fzg-ID %d) an Pos (%d,%d,%d). Kosten: $%d. Mit '/accepttune %d' annehmen.",requestID,getPlayerName(player),getElementData(player,"account_id"),itemName,getElementData(vehicleElement,"id"),rX,rY,rZ,itemPrice,requestID)
    for _,mechanic in ipairs(mechanicsOnline)do outputChatBox(notifyMsg,mechanic,255,160,0)end;triggerClientEvent(player,"mechanic:tuneRequestStatus",player,"Anfrage gesendet. Warte...",true,tuneType,levelOrID)
    setTimer(function(reqP)if pendingHighLevelTuneRequests[reqP]and pendingHighLevelTuneRequests[reqP].id==requestID then pendingHighLevelTuneRequests[reqP]=nil;if isElement(reqP)then triggerClientEvent(reqP,"mechanic:tuneRequestStatus",reqP,"Anfrage #"..requestID.." abgelaufen.",false);outputChatBox("Anfrage #"..requestID.." abgelaufen.",reqP,255,100,0)end end end,TUNE_REQUEST_TIMEOUT,1,player)
end)

addCommandHandler("accepttune", function(mechanicPlayer,cmd,requestIDStr)
    if not isElement(mechanicPlayer)then return end;local fid,rank=getPlayerFractionAndRankFunc(mechanicPlayer);if fid~=MECHANIC_FRACTION_ID_TUNE or not getElementData(mechanicPlayer,"mechanicImDienst")then outputChatBox("❌ Nur für Mechaniker im Dienst.",mechanicPlayer,255,0,0);return end
    local requestID=tonumber(requestIDStr);if not requestID then outputChatBox("SYNTAX: /accepttune [Anfrage-ID]",mechanicPlayer,200,200,0);return end
    local requestingPlayer,requestData=nil,nil;for p,data in pairs(pendingHighLevelTuneRequests)do if data.id==requestID then requestingPlayer=p;requestData=data;break end end
    if not requestData or not isElement(requestingPlayer)or not isElement(requestData.vehicle)then outputChatBox("❌ Anfrage #"..requestID.." nicht gefunden/gültig.",mechanicPlayer,255,0,0);return end
    local MAX_ACCEPT_DISTANCE=15;local mX,mY,mZ=getElementPosition(mechanicPlayer);local vX,vY,vZ=getElementPosition(requestData.vehicle);if getDistanceBetweenPoints3D(mX,mY,mZ,vX,vY,vZ)>MAX_ACCEPT_DISTANCE then outputChatBox("❌ Zu weit vom Fahrzeug des Kunden (max. "..MAX_ACCEPT_DISTANCE.."m).",mechanicPlayer,255,100,0);return end
    pendingHighLevelTuneRequests[requestingPlayer]=nil
    outputChatBox("Anfrage #"..requestID.." von "..getPlayerName(requestingPlayer).." angenommen.",mechanicPlayer,0,200,50)
    triggerClientEvent(requestingPlayer,"mechanic:tuneRequestStatus",requestingPlayer,getPlayerName(mechanicPlayer).." hat deine Anfrage angenommen.",true)

    triggerClientEvent(requestingPlayer, "mechanic:beginInstallNotification", requestingPlayer, MECHANIC_INSTALL_DURATION)
    triggerClientEvent(mechanicPlayer, "mechanic:beginInstallNotification", mechanicPlayer, MECHANIC_INSTALL_DURATION)
    triggerClientEvent(requestingPlayer, "mechanic:installationStarted", requestingPlayer, getPlayerName(mechanicPlayer), requestData.itemName)

    if MECHANIC_INSTALL_ANIM_LIB and MECHANIC_INSTALL_ANIM_NAME then
        -- Korrigierter Aufruf von setPedAnimation
        setPedAnimation(mechanicPlayer, MECHANIC_INSTALL_ANIM_LIB, MECHANIC_INSTALL_ANIM_NAME, -1, true, true, false, false, 250, true)
    end
    toggleAllControls(mechanicPlayer,false,true,false)

    setTimer(function(mech,reqPlayer,veh,tuneType,levelOrID,itemName,itemPrice)
        if not isElement(mech)or not isElement(reqPlayer)or not isElement(veh)then if isElement(mech)then toggleAllControls(mech,true);setPedAnimation(mech,false);outputChatBox("Installation abgebrochen (Ziel ungültig).",mech,255,0,0);triggerClientEvent(mech,"mechanic:installationFinished",mech,itemName,false)end;if isElement(reqPlayer)then triggerClientEvent(reqPlayer,"mechanic:installationFinished",reqPlayer,itemName,false)end;return end
        local mDistCheckX,mDistCheckY,mDistCheckZ=getElementPosition(mech);local vDistCheckX,vDistCheckY,vDistCheckZ=getElementPosition(veh);if getDistanceBetweenPoints3D(mDistCheckX,mDistCheckY,mDistCheckZ,vDistCheckX,vDistCheckY,vDistCheckZ)>MAX_ACCEPT_DISTANCE+2 then toggleAllControls(mech,true);setPedAnimation(mech,false);outputChatBox("Installation abgebrochen: Zu weit entfernt.",mech,255,0,0);triggerClientEvent(reqPlayer,"mechanic:installationFinished",reqPlayer,itemName,false);outputChatBox(getPlayerName(mech).." Installation abgebrochen.",reqPlayer,255,100,0);triggerClientEvent(mech,"mechanic:installationFinished",mech,itemName,false);return end
        if getPlayerMoney(reqPlayer)<itemPrice then toggleAllControls(mech,true);setPedAnimation(mech,false);outputChatBox(getPlayerName(reqPlayer).." hat nicht genug Geld ($"..itemPrice..").",mech,255,0,0);triggerClientEvent(reqPlayer,"mechanic:installationFinished",reqPlayer,itemName,false);outputChatBox("Installation fehlgeschlagen: Nicht genug Geld.",reqPlayer,255,0,0);triggerClientEvent(mech,"mechanic:installationFinished",mech,itemName,false);return end
        if takePlayerMoney(reqPlayer,itemPrice)then local vehicleDBID_install=getElementData(veh,"id");local dbColumn_install=(tuneType=="engine"and"tune1")or(tuneType=="nitro"and"tune2");if not vehicleDBID_install or not dbColumn_install then toggleAllControls(mech,true);setPedAnimation(mech,false);givePlayerMoney(reqPlayer,itemPrice);outputChatBox("Interner Fehler (DB-ID/Spalte). Geld zurück.",mech,255,0,0);triggerClientEvent(reqPlayer,"mechanic:installationFinished",reqPlayer,itemName,false);outputChatBox("Installation fehlgeschlagen (Serverfehler).",reqPlayer,255,0,0);triggerClientEvent(mech,"mechanic:installationFinished",mech,itemName,false);return end
            local success_install,dbErrMsg_install=exports.datenbank:executeDatabase("UPDATE vehicles SET "..dbColumn_install.." = ? WHERE id = ?",levelOrID,vehicleDBID_install)
            if not success_install then toggleAllControls(mech,true);setPedAnimation(mech,false);givePlayerMoney(reqPlayer,itemPrice);outputChatBox("DB Speicherfehler. Geld zurück.",mech,255,0,0);triggerClientEvent(reqPlayer,"mechanic:installationFinished",reqPlayer,itemName,false);outputChatBox("Installation fehlgeschlagen (DB-Fehler).",reqPlayer,255,0,0);triggerClientEvent(mech,"mechanic:installationFinished",mech,itemName,false);return end
            applySpecificUpgradeOnServer(veh,tuneType,levelOrID);outputChatBox(itemName.." für "..getPlayerName(reqPlayer).." installiert! ($"..itemPrice..")",mech,0,255,0);triggerClientEvent(reqPlayer,"mechanic:installationFinished",reqPlayer,itemName,true);outputChatBox(itemName.." von "..getPlayerName(mech).." installiert!",reqPlayer,0,255,0);triggerClientEvent(mech,"mechanic:installationFinished",mech,itemName,true)
            if addToFactionTreasuryFunc then local tresSuccess,tresMsg=addToFactionTreasuryFunc(MECHANIC_FRACTION_ID_TUNE,itemPrice);if tresSuccess then outputChatBox("💰 $"..itemPrice.." zur Kasse.",mech,0,220,120)else outputDebugString("[CarTuneSrv] Fraktionskasse Fehler: "..(tresMsg or "Unbekannt"))end end
            local cTuneDataUpd,_=exports.datenbank:queryDatabase("SELECT tune1,tune2,tune3 FROM vehicles WHERE id=?",vehicleDBID_install);local tuneDataToSend={tune1=0,tune2=0,tune3=0};if cTuneDataUpd and cTuneDataUpd[1]then tuneDataToSend={tune1=tonumber(cTuneDataUpd[1].tune1)or 0,tune2=tonumber(cTuneDataUpd[1].tune2)or 0,tune3=tonumber(cTuneDataUpd[1].tune3)or 0}end;triggerClientEvent(reqPlayer,"cartune:updateLocalTuneData",reqPlayer,tuneDataToSend)
        else outputChatBox("Fehler: Geldabzug fehlgeschlagen.",mech,255,0,0);triggerClientEvent(reqPlayer,"mechanic:installationFinished",reqPlayer,itemName,false);outputChatBox("Installation fehlgeschlagen (Zahlungsproblem).",reqPlayer,255,0,0);triggerClientEvent(mech,"mechanic:installationFinished",mech,itemName,false)end
        toggleAllControls(mech,true);setPedAnimation(mech,false)
    end, MECHANIC_INSTALL_DURATION, 1, mechanicPlayer, requestingPlayer, requestData.vehicle, requestData.tuneType, requestData.levelOrID, requestData.itemName, requestData.itemPrice)
end)

addEvent("cartune:requestUpdatedTuneData",true)
addEventHandler("cartune:requestUpdatedTuneData",root,function(targetVehicle)
    local player=client;if not isElement(player)or not isElement(targetVehicle)then return end;local vehicleDBID=getElementData(targetVehicle,"id");if not vehicleDBID then return end
    local tuneDataResult,_=exports.datenbank:queryDatabase("SELECT tune1,tune2,tune3 FROM vehicles WHERE id=?",vehicleDBID);local currentTuneData={tune1=0,tune2=0,tune3=0}
    if tuneDataResult and tuneDataResult[1]then currentTuneData.tune1=tonumber(tuneDataResult[1].tune1)or 0;currentTuneData.tune2=tonumber(tuneDataResult[1].tune2)or 0;currentTuneData.tune3=tonumber(tuneDataResult[1].tune3)or 0 end
    triggerClientEvent(player,"cartune:updateLocalTuneData",player,currentTuneData)
end)

--outputDebugString("[CarTuneServer] V8.1.1 (setPedAnimation Fix) geladen.")